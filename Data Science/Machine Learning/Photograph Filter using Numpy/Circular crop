%matplotlib inline
import numpy as np
import scipy as misc
import matplotlib.pyplot as plt
import imageio

photo_data = imageio.imread('./wifire/urmi.jpg')
plt.figure(figsize=(15,10))
total_rows, total_cols, total_layers = photo_data.shape
#print("photo_data = ", photo_data.shape)
#we will use ogrid function to help us vectorize the distance from the center
#ogrid returns as an ndarray
X, Y = np.ogrid[:total_rows, :total_cols]
#print("X = ", X.shape, " and Y = ", Y.shape)
# we will calculate center point x center_row and y center_col
# we will use vectors X and Y to calculate the points that are farther than 
# the distance of the radius
center_row, center_col = total_rows / 2, total_cols / 2
#print("center_row = ", center_row, "AND center_col = ", center_col)
#print(X - center_row)
#print(Y - center_col)
dist_from_center = (X - center_row)**2 + (Y - center_col)**2
#print(dist_from_center)
radius = (total_rows / 2)**2
#print("Radius = ", radius)
circular_mask = (dist_from_center > radius)
#print(circular_mask)
#print(circular_mask[1500:1700,2000:2200])
photo_data = imageio.imread('./wifire/urmi.jpg')
photo_data[circular_mask] = 0
plt.figure(figsize=(15,15))
plt.imshow(photo_data)
